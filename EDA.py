# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FqJcq1TL9zWqdUjHOhT45QsN8pMC3NPK

# Exploring Data Analyzing
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

df = pd.read_excel('C:\\Users\\mrtgn\\Desktop\\pusula\\Pusula_Murat_Gönül\\side_effect_data.xlsx')

# Create a summary DataFrame
summary_df = pd.DataFrame({
    'Data Type': df.dtypes,
    'Variety Count': df.nunique(),
    'Data Count': df.count(),
    'Missing Count': df.isnull().sum(),
    'Missing Percentage': (df.isnull().sum() / len(df)) * 100
})

print(summary_df)


# Calculate age from 'Dogum_Tarihi' 
current_year = datetime.now().year
df['Yas'] = current_year - pd.to_datetime(df['Dogum_Tarihi']).dt.year

# Distribution plot of age
plt.figure(figsize=(8, 6))
sns.histplot(df['Yas'])
plt.title('Patient Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Pie chart of sex
plt.figure(figsize=(6, 6))
df['Cinsiyet'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Sex')
plt.ylabel('')
plt.show()

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Frequency count of 'Yan_Etki'
yan_etki_counts = df['Yan_Etki'].value_counts()

# Create a bar plot
plt.figure(figsize=(10, 6))
yan_etki_counts.plot(kind='bar')
plt.xlabel('Side Effect')
plt.ylabel('Frequency')
plt.title('Frequency of Side Effect')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability if needed
plt.show()

# Convert 'Yan_Etki_Bildirim_Tarihi' and 'Ilac_Baslangic_Tarihi' to datetime objects if they are not already.
df['Yan_Etki_Bildirim_Tarihi'] = pd.to_datetime(df['Yan_Etki_Bildirim_Tarihi'])
df['Ilac_Baslangic_Tarihi'] = pd.to_datetime(df['Ilac_Baslangic_Tarihi'])

# Calculate the time difference between 'Yan_Etki_Bildirim_Tarihi' and 'Ilac_Baslangic_Tarihi'
df['Time_Difference'] = (df['Yan_Etki_Bildirim_Tarihi'] - df['Ilac_Baslangic_Tarihi']).dt.days

# Group data by 'Yan_Etki' and calculate the mean time difference for each side effect.
yan_etki_time_diff = df.groupby('Yan_Etki')['Time_Difference'].mean()

# Create a bar plot
plt.figure(figsize=(10, 6))
yan_etki_time_diff.plot(kind='bar')
plt.xlabel('Side Effect')
plt.ylabel('Average Time Difference (Days)')
plt.title('Average Time Difference Between Side Effect Report and Medication Start Date')
plt.xticks(rotation=90)
plt.show()


# Create a contingency table (cross-tabulation) of 'Ilac_Adi' and 'Yan_Etki'
contingency_table = pd.crosstab(df['Ilac_Adi'], df['Yan_Etki'])

# Create the heatmap
plt.figure(figsize=(20, 10))
sns.heatmap(contingency_table, annot=True, fmt='d', cmap='viridis')
plt.title('Heatmap of Drug and Side Effects')
plt.xlabel('Side Effect')
plt.ylabel('Drug Name')
plt.xticks(rotation=90)
plt.yticks(rotation=0)
plt.show()

# Frequency count of 'Ilac_Adi'
ilac_adi_counts = df['Ilac_Adi'].value_counts()

# Create a bar plot
plt.figure(figsize=(20, 6))
ilac_adi_counts.plot(kind='bar')
plt.xlabel('Drug Name')
plt.ylabel('Frequency')
plt.title('Frequency of Medication Used')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability if needed
plt.show()


# Group by 'Ilac_Adi' and 'Yan_Etki', then count the occurrences
side_effect_frequency = df.groupby(['Ilac_Adi', 'Yan_Etki'])['Yan_Etki'].count().unstack().fillna(0)

# Calculate the total frequency of each drug
drug_frequency = df['Ilac_Adi'].value_counts()

# Calculate the number of unique side effects for each drug
unique_side_effect_count = df.groupby('Ilac_Adi')['Yan_Etki'].nunique()

# Create a new DataFrame with the desired information
result_df = pd.DataFrame({
    'Drug Frequency': drug_frequency,
    'Unique Side Effect Count': unique_side_effect_count
})

# Join the side effect frequency DataFrame to the result DataFrame
result_df = result_df.join(side_effect_frequency)

# Sort by drug frequency in descending order
result_df = result_df.sort_values('Drug Frequency', ascending=False)

result_df.to_excel('EDA.xlsx', index=False)
print(result_df)

